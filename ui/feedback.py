import streamlit as st
import query
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

def app():

    if 'logged_in' in st.session_state:
        if st.session_state.logged_in['is_logged']:

            progress = ["Covid19", "Thi·∫øu M√°u","ƒê√°i Th√°o ƒê∆∞·ªùng"]
            st.title(':red[G·ª≠i ph·∫£n h·ªìi cho ch√∫ng t√¥i]  üíñ')
            user = {'name': st.session_state.logged_in['name'],'user_id':st.session_state.logged_in['user_id'], 'phone': st.session_state.logged_in['phone'],
                    'email': st.session_state.logged_in['email'],'total':st.session_state.logged_in['total']}
            with st.expander("Th√¥ng tin c·ªßa b·∫°n"):
                marks1, marks2, marks3 = st.columns(3, gap='large')
                with marks1:
                    st.info(user['name'], icon="üë§")
                with marks2:
                    st.info(user['phone'], icon="üìû")
                with marks3:
                    st.info(str(user['total'])+' l·∫ßn test', icon="üß™")
            selected_progress = st.selectbox("B·ªánh ƒë√£ d·ª± ƒëo√°n:", progress)

            table_name = ''
            df = pd.DataFrame()
            if selected_progress == "Covid19":
                data_dict = query.get_data_by_user_id(user['user_id'],'covid_test_results')
                if data_dict is not None:
                    data_dict['created_at'] = data_dict['created_at'].strftime('%Y-%m-%d %H:%M:%S')
                    df = pd.DataFrame(data_dict, index=[0])
                    df = df.drop('user_id', axis=1)
                table_name = 'covid_test_results'
            elif selected_progress == "Thi·∫øu M√°u":
                data_dict = query.get_data_by_user_id(user['user_id'],'anemia_test_results')
                if data_dict is not None:
                    data_dict['created_at'] = data_dict['created_at'].strftime('%Y-%m-%d %H:%M:%S')
                    df = pd.DataFrame(data_dict, index=[0])
                    df = df.drop('user_id', axis=1)
                table_name = 'anemia_test_results'
            elif selected_progress == "ƒê√°i Th√°o ƒê∆∞·ªùng":
                data_dict = query.get_data_by_user_id(user['user_id'],'anemia_test_results')
                if data_dict is not None:
                    data_dict['created_at'] = data_dict['created_at'].strftime('%Y-%m-%d %H:%M:%S')
                    df = pd.DataFrame(data_dict, index=[0])
                    df = df.drop('user_id', axis=1)
                table_name = 'diabetes_test_results'
            feedback = st.text_area("Ph·∫£n h·ªìi:")
            
            # T·∫°o GridOptionsBuilder ƒë·ªÉ c·∫•u h√¨nh b·∫£ng
            gb = GridOptionsBuilder.from_dataframe(df)
            gb.configure_selection('multiple', use_checkbox=True)  # C·∫•u h√¨nh ƒë·ªÉ ch·ªçn nhi·ªÅu h√†ng v·ªõi checkbox
            
            grid_options = gb.build()
            # Hi·ªÉn th·ªã b·∫£ng v·ªõi AgGrid
            grid_response = AgGrid(
                df,
                gridOptions=grid_options,
                update_mode=GridUpdateMode.SELECTION_CHANGED,  # C·∫≠p nh·∫≠t khi c√≥ thay ƒë·ªïi trong l·ª±a ch·ªçn
                enable_enterprise_modules=True,
                theme='streamlit',  # B·∫°n c√≥ th·ªÉ ch·ªçn c√°c theme kh√°c nh∆∞ 'light', 'dark', 'blue', 'fresh', 'material'
                height=200,
                width='100%',
            )

            satisfaction_level_options = ["D·ª± ƒëo√°n ch√≠nh x√°c", "D·ª± ƒëo√°n kh√¥ng ch√≠nh x√°c"]
            satisfaction_level = st.radio("B·∫°n th·∫•y d·ª± ƒëo√°n c·ªßa ch√∫ng t√¥i nh∆∞ th·∫ø n√†o?", options=satisfaction_level_options)
            if st.button("G·ª≠i ph·∫£n h·ªìi"):
                selected_rows = grid_response['selected_rows']
                if selected_rows is None:
                    st.warning("B·∫°n ch∆∞a ch·ªçn m·ª•c d·ª± ƒëo√°n c·ªßa ch√∫ng t√¥i!!")
                elif selected_rows is not None and not selected_rows.empty:
                    if satisfaction_level == "D·ª± ƒëo√°n kh√¥ng ch√≠nh x√°c":
                        diseased = 0
                        if selected_rows['diseased'][0] == 0:
                            diseased = 1
                        query.update_data_predict(user['user_id'],diseased,table_name)
                    query.insert_feedback(st.session_state.logged_in['user_id'],selected_progress, feedback, satisfaction_level)
                    st.markdown("""
                                <style>
                                .success-box {
                                    padding: 20px;
                                    border-radius: 10px;
                                    background-color: #f0f8ff;
                                    color: #006400;
                                    font-size: 18px;
                                    width: 400px;
                                    margin: 0 auto;
                                    text-align: center;
                                    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
                                }
                                .success-box h4 {
                                    margin-top: 0;
                                    font-size: 24px;
                                    color: #006400;
                                }
                                .success-box p {
                                    margin-bottom: 0;
                                }
                                </style>
                                <div class="success-box">
                                    <h4>üéâ Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c g·ª≠i!</h4>
                                    <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• d·ª± ƒëo√°n c·ªßa ch√∫ng t√¥i!</p>
                                </div>
                            """, unsafe_allow_html=True)
                    st.balloons()
        else:
            st.info("H√£y ƒëƒÉng nh·∫≠p ƒë·ªÉ ph·∫£n h·ªìi!!")
